<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tres en Raya</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <style>
        /* Estilos CSS (con borde RGB y efecto 3D) */
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #1a1a2e;
            color: #e0e0e0;
            margin: 0;
            overflow: hidden;
        }

        @keyframes rgb-border-spin {
            0% { border-color: hsl(0, 100%, 50%); }
            17% { border-color: hsl(60, 100%, 50%); }
            33% { border-color: hsl(120, 100%, 50%); }
            50% { border-color: hsl(180, 100%, 50%); }
            67% { border-color: hsl(240, 100%, 50%); }
            83% { border-color: hsl(300, 100%, 50%); }
            100% { border-color: hsl(360, 100%, 50%); }
        }

        .container {
            text-align: center;
            background-color: #2c3e50;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
            width: 90%;
            max-width: 400px;
            position: relative;
            z-index: 1;
            border: 4px solid transparent;
            animation: rgb-border-spin 4s linear infinite;
        }

        h1 {
            color: #ecf0f1;
            margin-bottom: 20px;
            font-size: 1.8em;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, minmax(60px, 1fr));
            grid-template-rows: repeat(3, minmax(60px, 1fr));
            gap: 10px;
            margin: 20px auto;
            max-width: 320px;
            aspect-ratio: 1 / 1;
            transition: opacity 0.3s ease;
        }

        .board.disabled {
            opacity: 0.5;
            pointer-events: none;
        }

        .cell {
            background-color: #4a627a;
            border: 2px solid #56708a;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: clamp(2em, 10vw, 3.5em);
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease, border-color 0.3s ease, box-shadow 0.3s ease; /* Added box-shadow transition */
            line-height: 1;
            overflow: hidden;
            user-select: none;
            position: relative;
            color: #e0e0e0;
        }

        .cell.clickable { cursor: pointer; }
        .cell.clickable:hover {
            background-color: #5c7a99;
            transform: scale(1.05); /* Slightly larger on hover */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Add shadow on hover */
        }
        .cell-x { color: #e74c3c; }
        .cell-o { color: #3498db; }

        /* Efecto 3D */
        .cell {
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); /* Subtle initial shadow */
        }
        .cell.clickable:active {
            transform: scale(0.95);
            box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3); /* Smaller shadow on active */
        }

        /* Efecto Fuego */
        @keyframes fire-effect {
            0% { box-shadow: 0 0 5px 2px #f39c12, 0 0 10px 5px #e74c3c, 0 0 15px 8px rgba(241, 196, 15, 0.5); transform: scale(1); }
            50% { box-shadow: 0 0 10px 4px #f1c40f, 0 0 20px 8px #e67e22, 0 0 30px 12px rgba(231, 76, 60, 0.3); transform: scale(1.05); }
            100% { box-shadow: 0 0 5px 2px #f39c12, 0 0 10px 5px #e74c3c, 0 0 15px 8px rgba(241, 196, 15, 0.5); transform: scale(1); }
        }
        .cell.fire-move {
            animation: fire-effect 0.7s ease-out;
        }

        .status-message {
            margin-top: 20px;
            font-size: 1.2em;
            min-height: 1.5em;
            font-weight: bold;
            color: #bdc3c7;
            transition: color 0.5s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            position: relative;
        }
        .status-message.win { color: #2ecc71; }
        .status-message.lose { color: #e74c3c; }
        .status-message.draw { color: #f39c12; }

        .winning-text-container {
            position: relative;
            display: inline-block;
            line-height: 1;
        }

        .winning-letter {
            display: inline-block;
            transition: transform 0.5s ease-in-out, font-size 0.3s ease;
            font-size: 1.2em;
        }

        .reset-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1em;
            color: #fff;
            background-color: #3498db;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .reset-button:hover { background-color: #2980b9; }
        .thinking { margin-top: 15px; font-style: italic; color: #bdc3c7; height: 1.5em; }

        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex; justify-content: center; align-items: center;
            z-index: 1000; opacity: 1; transition: opacity 0.3s ease;
        }
        .modal-overlay.hidden { opacity: 0; pointer-events: none; }
        .modal-content {
            background-color: #ecf0f1; color: #2c3e50;
            padding: 30px 40px; border-radius: 8px; text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        .modal-content h2 { margin-top: 0; margin-bottom: 25px; color: #34495e; }
        .modal-content button {
            padding: 12px 25px; font-size: 1.1em; margin: 0 10px;
            border: none; border-radius: 5px; cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
        }
        .modal-content button:active { transform: scale(0.95); }
        .modal-button-player { background-color: #e74c3c; color: white; }
        .modal-button-player:hover { background-color: #c0392b; }
        .modal-button-ai { background-color: #3498db; color: white; }
        .modal-button-ai:hover { background-color: #2980b9; }

    </style>
</head>
<body>
    <div id="app">
        <div class="modal-overlay" :class="{ 'hidden': playerSelectionDone }">
            <div class="modal-content">
                <h2>¿Quién empieza?</h2>
                <button @click="selectStartingPlayer('X')" class="modal-button-player">Retador (X)</button>
                <button @click="selectStartingPlayer('O')" class="modal-button-ai">Computadora (O)</button>
            </div>
        </div>

        <div class="container">
            <h1>Tres en Raya - ¡Fuego RGB!</h1>
            <div class="status-message" :class="{ 'win': winner === 'X', 'lose': winner === 'O', 'draw': winner === 'Empate' }">
                <div v-if="winner === 'O'" class="winning-text-container">
                    <span v-for="(letter, index) in winningMessage"
                          :key="index"
                          class="winning-letter"
                          :style="{ transform: getLetterTransform(index) }">
                        {{ letter }}
                    </span>
                </div>
                <span v-else>{{ message }}</span>
            </div>

            <div class="board" :class="{ 'disabled': !playerSelectionDone }">
                <div v-for="(cell, index) in board"
                     :key="index"
                     class="cell"
                     :class="{
                        'cell-x': cell === 'X',
                        'cell-o': cell === 'O',
                        'fire-move': index === lastMoveIndex && !isGameOver,
                        'clickable': !cell && !isGameOver && currentPlayer === 'X' && playerSelectionDone
                     }"
                     @click="makePlayerMove(index)">
                    {{ cell }}
                </div>
            </div>

            <button @click="resetGame" v-if="isGameOver" class="reset-button">
                Jugar de Nuevo
            </button>
            <div v-if="!isGameOver && currentPlayer === 'O' && playerSelectionDone" class="thinking">
                IA está pensando...
            </div>
        </div>
    </div>

    <script>
        // --- Vue App y Lógica del Juego ---
        const { createApp, ref, computed, nextTick, onMounted } = Vue;

        let audioContext = null;
        let clickBuffer = null;
        function initAudio() { if (!audioContext) { try { audioContext = new (window.AudioContext || window.webkitAudioContext)(); createClickSoundBuffer(); } catch (e) { console.error("Web Audio API no soportada.", e); } } if (audioContext && audioContext.state === 'suspended') { audioContext.resume(); } }
        function createClickSoundBuffer() { if (!audioContext) return; const sr = audioContext.sampleRate; const dur = 0.05; const bufSize = sr * dur; clickBuffer = audioContext.createBuffer(1, bufSize, sr); const output = clickBuffer.getChannelData(0); for (let i = 0; i < bufSize; i++) { output[i] = (Math.random() * 2 - 1) * Math.exp(-i / (sr * 0.01)); } }
        function playClickSound() { initAudio(); if (!audioContext || !clickBuffer || audioContext.state !== 'running') { console.warn("AudioContext no listo."); return; } try { const source = audioContext.createBufferSource(); source.buffer = clickBuffer; source.connect(audioContext.destination); source.start(); } catch (e) { console.error("Error al reproducir sonido:", e); } }

        createApp({
            setup() {
                const board = ref(Array(9).fill(''));
                const currentPlayer = ref(null);
                const winner = ref(null);
                const isGameOver = ref(false);
                const message = ref('Selecciona quién empieza...');
                const lastMoveIndex = ref(null);
                const playerSelectionDone = ref(false);
                const winningMessage = ref('');
                const winningAnimationProgress = ref(0);
                const animationInterval = ref(null);
                const zoomFactor = ref(1.2);
                const fontSizeFactor = ref(1.4);

                onMounted(() => {
                    initAudio();
                    document.body.addEventListener('click', initAudio, { once: true });
                });

                const winningCombinations = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] ];

                const checkWinner = () => {
                    for (const combination of winningCombinations) { const [a, b, c] = combination; if (board.value[a] && board.value[a] === board.value[b] && board.value[a] === board.value[c]) { return board.value[a]; } }
                    if (board.value.every(cell => cell !== '')) { return 'Empate'; } return null;
                };

                const selectStartingPlayer = (startingPlayer) => {
                    currentPlayer.value = startingPlayer;
                    playerSelectionDone.value = true;
                    message.value = `Turno de ${startingPlayer}`;
                    if (startingPlayer === 'O') {
                        setTimeout(makeAIMove, 500);
                    }
                };

                const makePlayerMove = (index) => {
                    if (!playerSelectionDone.value || board.value[index] || isGameOver.value || currentPlayer.value !== 'X') { return; }
                    playClickSound();
                    board.value[index] = 'X';
                    lastMoveIndex.value = index;
                    const gameStatus = checkWinner();
                    if (gameStatus) { handleGameOver(gameStatus); }
                    else { currentPlayer.value = 'O'; message.value = 'IA está pensando...'; setTimeout(makeAIMove, 700); }
                };

                const makeAIMove = () => {
                    if (isGameOver.value || !playerSelectionDone.value) return;
                    const bestMove = findBestMove();
                    if (bestMove !== null) {
                        playClickSound();
                        board.value[bestMove] = 'O';
                        lastMoveIndex.value = bestMove;
                        const gameStatus = checkWinner();
                        if (gameStatus) { handleGameOver(gameStatus); }
                        else { currentPlayer.value = 'X'; message.value = 'Tu turno (X)'; }
                    }
                    nextTick(() => { });
                };

                const findBestMove = () => {
                    let move = findWinningMove('O'); if (move !== null) return move;
                    move = findWinningMove('X'); if (move !== null) return move;
                    if (board.value[4] === '') return 4;
                    const corners = [0, 2, 6, 8]; const opp = { 0: 8, 2: 6, 6: 2, 8: 0 };
                    for (const c of corners) { if (board.value[c] === 'X' && board.value[opp[c]] === '') return opp[c]; }
                    for (const c of corners) { if (board.value[c] === '') return c; }
                    const sides = [1, 3, 5, 7]; for (const s of sides) { if (board.value[s] === '') return s; }
                    const firstEmpty = board.value.findIndex(cell => cell === ''); return firstEmpty !== -1 ? firstEmpty : null;
                };
                const findWinningMove = (player) => {
                    for (let i = 0; i < 9; i++) { if (board.value[i] === '') { board.value[i] = player; if (checkWinner() === player) { board.value[i] = ''; return i; } board.value[i] = ''; } } return null;
                };

                const handleGameOver = (status) => {
                    isGameOver.value = true;
                    winner.value = status;
                    if (status === 'X') {
                        message.value = '¡Felicidades, has ganado!';
                    } else if (status === 'O') {
                        winningMessage.value = '¡La IA ha ganado!';
                        message.value = '';
                        startZoomAnimation();
                    } else {
                        message.value = '¡Es un empate!';
                    }
                };

                const resetGame = () => {
                    board.value.fill('');
                    currentPlayer.value = null;
                    winner.value = null;
                    isGameOver.value = false;
                    message.value = 'Selecciona quién empieza...';
                    lastMoveIndex.value = null;
                    playerSelectionDone.value = false;
                    winningMessage.value = '';
                    winningAnimationProgress.value = 0;
                    if (animationInterval.value) {
                        clearInterval(animationInterval.value);
                        animationInterval.value = null;
                    }
                };

                const startZoomAnimation = () => {
                    if (animationInterval.value) return;

                    let index = 0;
                    const textLength = winningMessage.value.length;
                    winningAnimationProgress.value = 0;

                    animationInterval.value = setInterval(() => {
                        winningAnimationProgress.value = index;
                        index++;

                        if (index > textLength) {
                            clearInterval(animationInterval.value);
                            animationInterval.value = null;
                            winningAnimationProgress.value = 0;
                        }
                    }, 100);
                };

                const getLetterTransform = (charIndex) => {
                    if (charIndex < winningAnimationProgress.value) {
                        const scale = zoomFactor.value;
                        const fontSize = fontSizeFactor.value;
                        return `scale(${scale}) translateY(-${(scale - 1) * 15}px) translateX(${(scale-1) * 5}px); font-size: ${fontSize}em;`;
                    }
                    return 'scale(1)';
                };

                return {
                    board, currentPlayer, winner, isGameOver, message, lastMoveIndex, playerSelectionDone,
                    makePlayerMove, resetGame, selectStartingPlayer, winningMessage, getLetterTransform
                };
            }
        }).mount('#app');
    </script>
</body>
</html>
